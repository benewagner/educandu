#!/usr/bin/env node

require('@babel/register')({ extensions: ['.jsx'] });
require('@babel/polyfill');

const path = require('path');
const util = require('util');
const glob = require('glob');
const roles = require('../src/domain/roles');
const testHelper = require('../src/test-helper');
const Database = require('../src/stores/database');
const fileHelper = require('../src/utils/file-helper');
const UserService = require('../src/services/user-service');
const MenuService = require('../src/services/menu-service');
const SettingService = require('../src/services/setting-service');
const DocumentService = require('../src/services/document-service');
const serverBootstrapper = require('../src/bootstrap/server-bootstrapper');

const globP = util.promisify(glob);

const ROLES_USER = [roles.USER];
const ROLES_EDITOR = [roles.USER, roles.EDITOR];
const ROLES_SUPER_EDITOR = [roles.USER, roles.EDITOR, roles.SUPER_EDITOR];
const ROLES_SUPER_USER = [roles.USER, roles.EDITOR, roles.SUPER_EDITOR, roles.SUPER_USER];

(async function seed() {

  const container = await serverBootstrapper.createContainer();

  const db = container.get(Database);
  const userService = container.get(UserService);
  const menuService = container.get(MenuService);
  const settingService = container.get(SettingService);
  const documentService = container.get(DocumentService);

  await testHelper.dropAllCollections(db);

  const user = await testHelper.createAndVerifyUser(userService, 'test', 'test', 'test@test.com', ROLES_SUPER_USER);
  await testHelper.createAndVerifyUser(userService, 'test-user', 'test-user', 'test-user@test.com', ROLES_USER);
  await testHelper.createAndVerifyUser(userService, 'test-editor', 'test-editor', 'test-editor@test.com', ROLES_EDITOR);
  await testHelper.createAndVerifyUser(userService, 'test-super-editor', 'test-super-editor', 'test-super-editor@test.com', ROLES_SUPER_EDITOR);
  await testHelper.createAndVerifyUser(userService, 'test-super-user', 'test-super-user', 'test-super-user@test.com', ROLES_SUPER_USER);

  const userFile = path.join(__dirname, '../test/test-users.json');
  const docFiles = await globP(path.join(__dirname, '../test/test-docs/*.json'));
  const menuFiles = await globP(path.join(__dirname, '../test/test-menus/*.json'));

  const userPayloads = await fileHelper.readJson(userFile);
  const docPayloads = await Promise.all(docFiles.map(file => fileHelper.readJson(file)));
  const menuPayloads = await Promise.all(menuFiles.map(file => fileHelper.readJson(file)));

  Promise.all(userPayloads.map(payload => {
    return testHelper.createAndVerifyUser(
      userService,
      payload.username,
      payload.password,
      payload.email,
      payload.roles,
      payload.profile,
      payload.lockedOut
    );
  }));

  docPayloads.forEach(payload => {
    payload.user = user;
  });

  menuPayloads.forEach(payload => {
    payload.user = user;
  });

  const docs = await Promise.all(docPayloads.map(payload => documentService.createDocumentRevision(payload)));
  await Promise.all(menuPayloads.map(payload => menuService.saveMenu(payload)));
  await settingService.setLandingPageDocumentId(docs.find(doc => doc.title === 'Landing Page')._id);

  await serverBootstrapper.disposeContainer(container);

})();
